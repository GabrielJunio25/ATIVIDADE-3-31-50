#include <stdio.h>
#include <stdbool.h>

#define GRID_SIZE 9

// Função para imprimir o Sudoku
void printGrid(int grid[GRID_SIZE][GRID_SIZE]) {
  for (int i = 0; i < GRID_SIZE; i++) {
    for (int j = 0; j < GRID_SIZE; j++) {
      printf("%d ", grid[i][j]);
      if ((j + 1) % 3 == 0 && j != GRID_SIZE - 1) {
        printf("| ");
      }
    }
    printf("\n");
    if ((i + 1) % 3 == 0 && i != GRID_SIZE - 1) {
      printf("------+-------+------\n");
    }
  }
}

// Função para verificar se um número é válido em uma determinada posição
bool isValid(int grid[GRID_SIZE][GRID_SIZE], int row, int col, int num) {
  // Verifica a linha
  for (int x = 0; x < GRID_SIZE; x++) {
    if (grid[row][x] == num) {
      return false;
    }
  }

  // Verifica a coluna
  for (int x = 0; x < GRID_SIZE; x++) {
    if (grid[x][col] == num) {
      return false;
    }
  }

  // Verifica o bloco 3x3
  int startRow = row - row % 3;
  int startCol = col - col % 3;
  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      if (grid[i + startRow][j + startCol] == num) {
        return false;
      }
    }
  }

  return true;
}

// Função recursiva para resolver o Sudoku
bool solveSudoku(int grid[GRID_SIZE][GRID_SIZE]) {
  for (int row = 0; row < GRID_SIZE; row++) {
    for (int col = 0; col < GRID_SIZE; col++) {
      // Encontra uma célula vazia (0)
      if (grid[row][col] == 0) {
        // Tenta inserir números de 1 a 9
        for (int num = 1; num <= 9; num++) {
          if (isValid(grid, row, col, num)) {
            // Se o número for válido, insere-o na célula
            grid[row][col] = num;

            // Chama recursivamente para resolver o resto do Sudoku
            if (solveSudoku(grid)) {
              return true; // Solução encontrada
            } else {
              // Se não encontrar uma solução, volta para o estado anterior
              grid[row][col] = 0;
            }
          }
        }
        return false; // Nenhum número válido encontrado para a célula
      }
    }
  }
  return true; // Sudoku já está resolvido
}

int main() {
  int grid[GRID_SIZE][GRID_SIZE] = {
    {5, 3, 0, 0, 7, 0, 0, 0, 0},
    {6, 0, 0, 1, 9, 5, 0, 0, 0},
    {0, 9, 8, 0, 0, 0, 0, 6, 0},
    {8, 0, 0, 0, 6, 0, 0, 0, 3},
    {4, 0, 0, 8, 0, 3, 0, 0, 1},
    {7, 0, 0, 0, 2, 0, 0, 0, 6},
    {0, 6, 0, 0, 0, 0, 2, 8, 0},
    {0, 0, 0, 4, 1, 9, 0, 0, 5},
    {0, 0, 0, 0, 8, 0, 0, 7, 9}
  };

  printf("Sudoku original:\n");
  printGrid(grid);

  if (solveSudoku(grid)) {
    printf("\nSudoku resolvido:\n");
    printGrid(grid);
  } else {
    printf("\nSem solução.\n");
  }

  return 0;
}
