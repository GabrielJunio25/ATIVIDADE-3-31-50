#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_PATTERN_LENGTH 100
#define MAX_TEXT_LENGTH 1000

// Função para encontrar a primeira ocorrência de um padrão em um texto
int findPattern(char *text, char *pattern) {
  int textLength = strlen(text);
  int patternLength = strlen(pattern);

  // Verifica se o padrão é menor que o texto
  if (patternLength > textLength) {
    return -1; // Padrão não encontrado
  }

  // Itera sobre o texto
  for (int i = 0; i <= textLength - patternLength; i++) {
    // Verifica se o padrão corresponde à substring atual do texto
    int j;
    for (j = 0; j < patternLength; j++) {
      if (text[i + j] != pattern[j]) {
        break; // Padrão não corresponde
      }
    }

    // Se o padrão corresponder, retorna o índice da primeira ocorrência
    if (j == patternLength) {
      return i; // Padrão encontrado
    }
  }

  return -1; // Padrão não encontrado
}

int main() {
  char text[MAX_TEXT_LENGTH];
  char pattern[MAX_PATTERN_LENGTH];

  printf("Digite o texto: ");
  fgets(text, MAX_TEXT_LENGTH, stdin);
  text[strcspn(text, "\n")] = 0; // Remove o caractere de nova linha

  printf("Digite o padrão: ");
  fgets(pattern, MAX_PATTERN_LENGTH, stdin);
  pattern[strcspn(pattern, "\n")] = 0; // Remove o caractere de nova linha

  int index = findPattern(text, pattern);

  if (index == -1) {
    printf("Padrão não encontrado no texto.\n");
  } else {
    printf("O padrão foi encontrado no índice %d.\n", index);
  }

  return 0;
}
