#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Define o tamanho máximo da pilha
#define MAX_SIZE 100

// Estrutura para representar a pilha
struct Stack {
  int items[MAX_SIZE];
  int top;
};

// Função para inicializar a pilha
void initialize(struct Stack *stack) {
  stack->top = -1;
}

// Função para verificar se a pilha está vazia
int isEmpty(struct Stack *stack) {
  return stack->top == -1;
}

// Função para verificar se a pilha está cheia
int isFull(struct Stack *stack) {
  return stack->top == MAX_SIZE - 1;
}

// Função para empilhar um elemento
void push(struct Stack *stack, int item) {
  if (isFull(stack)) {
    printf("A pilha está cheia!\n");
    return;
  }
  stack->top++;
  stack->items[stack->top] = item;
}

// Função para desempilhar um elemento
int pop(struct Stack *stack) {
  if (isEmpty(stack)) {
    printf("A pilha está vazia!\n");
    return -1; // Retorna -1 para indicar um erro
  }
  int item = stack->items[stack->top];
  stack->top--;
  return item;
}

// Função para avaliar uma expressão pós-fixa
int evaluatePostfix(char *postfix) {
  struct Stack stack;
  initialize(&stack);
  int i = 0;

  while (postfix[i] != '\0') {
    if (postfix[i] >= '0' && postfix[i] <= '9') {
      // Se o caractere for um operando (número), empilha-o
      push(&stack, postfix[i] - '0');
    } else {
      // Se o caractere for um operador, desempilha os dois operandos e aplica a operação
      int operand2 = pop(&stack);
      int operand1 = pop(&stack);

      switch (postfix[i]) {
        case '+':
          push(&stack, operand1 + operand2);
          break;
        case '-':
          push(&stack, operand1 - operand2);
          break;
        case '*':
          push(&stack, operand1 * operand2);
          break;
        case '/':
          if (operand2 == 0) {
            printf("Erro: Divisão por zero!\n");
            return -1; // Retorna -1 para indicar um erro
          }
          push(&stack, operand1 / operand2);
          break;
      }
    }
    i++;
  }

  // O resultado da expressão está no topo da pilha
  return pop(&stack);
}

int main() {
  char postfix[100];

  printf("Digite a expressão pós-fixa: ");
  fgets(postfix, 100, stdin);
  postfix[strcspn(postfix, "\n")] = 0; // Remove o caractere de nova linha

  int result = evaluatePostfix(postfix);

  if (result != -1) {
    printf("O valor da expressão pós-fixa é: %d\n", result);
  }

  return 0;
}
